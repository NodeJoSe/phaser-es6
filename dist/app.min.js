(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _load = require('./states/load');

var _load2 = _interopRequireDefault(_load);

var _menu = require('./states/menu');

var _menu2 = _interopRequireDefault(_menu);

var _play = require('./states/play');

var _play2 = _interopRequireDefault(_play);

var _gameover = require('./states/gameover');

var _gameover2 = _interopRequireDefault(_gameover);

var _victory = require('./states/victory');

var _victory2 = _interopRequireDefault(_victory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = function (_Phaser$Game) {
  _inherits(Game, _Phaser$Game);

  function Game() {
    var _this;

    _classCallCheck(this, Game);

    return _this = _possibleConstructorReturn(this, (Game.__proto__ || Object.getPrototypeOf(Game)).call(this, 800, 600, Phaser.CANVAS, 'game', {
      create: function create() {
        _this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;

        _this.state.add('load', _load2.default);
        _this.state.add('menu', _menu2.default);
        _this.state.add('play', _play2.default);
        _this.state.add('gameover', _gameover2.default);
        _this.state.add('victory', _victory2.default);
        _this.state.start('load');
      }
    }));
  }

  return Game;
}(Phaser.Game);

new Game();

},{"./states/gameover":3,"./states/load":4,"./states/menu":5,"./states/play":6,"./states/victory":7}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Wizard = function (_Phaser$Sprite) {
  _inherits(Wizard, _Phaser$Sprite);

  function Wizard(game, x, y) {
    _classCallCheck(this, Wizard);

    var _this = _possibleConstructorReturn(this, (Wizard.__proto__ || Object.getPrototypeOf(Wizard)).call(this, game, x, y, 'wizard'));

    _this.anchor.setTo(0.5, 0.5);

    _this.scale.setTo(0.65, 0.65);

    _this.animations.add('right', [0, 1, 2]);

    _this.animations.add('left', [3, 4, 5]);

    _this.game.physics.enable(_this, Phaser.Physics.ARCADE);

    _this.body.drag.set(100);

    _this.body.maxVelocity.set(500);

    _this.body.collideWorldBounds = true;
    _this.body.width -= 32;
    _this.body.height -= 32;
    return _this;
  }

  _createClass(Wizard, [{
    key: 'move',
    value: function move(cursors) {
      if (cursors.up.isDown) {
        this.body.acceleration.y = -300;
      } else if (cursors.down.isDown) {
        this.body.acceleration.y = 300;
      } else {
        this.body.acceleration.y = 0;
      }
      if (cursors.left.isDown) {
        this.body.acceleration.x = -300;
        this.animations.play('left', 4, true);
      } else if (cursors.right.isDown) {
        this.body.acceleration.x = 300;
        this.animations.play('right', 4, true);
      } else {
        this.body.acceleration.x = 0;
      }
    }
  }]);

  return Wizard;
}(Phaser.Sprite);

exports.default = Wizard;

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameOver = function (_Phaser$State) {
  _inherits(GameOver, _Phaser$State);

  function GameOver() {
    _classCallCheck(this, GameOver);

    return _possibleConstructorReturn(this, (GameOver.__proto__ || Object.getPrototypeOf(GameOver)).apply(this, arguments));
  }

  _createClass(GameOver, [{
    key: 'create',
    value: function create() {
      var _this2 = this;

      var textStyle = {
        font: '45px Arial',
        alight: 'center',
        stroke: 'red',
        fill: 'red'
      };

      var title = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'GAME OVER', textStyle);
      title.anchor.set(0.5);

      textStyle.font = '36px Arial';

      var instructions = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '"s" key to play again', textStyle);
      instructions.anchor.set(0.5);

      var sKey = this.game.input.keyboard.addKey(Phaser.KeyCode.S);
      sKey.onDown.addOnce(function () {
        return _this2.game.state.start('play');
      });
    }
  }]);

  return GameOver;
}(Phaser.State);

exports.default = GameOver;

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Load = function (_Phaser$State) {
  _inherits(Load, _Phaser$State);

  function Load() {
    _classCallCheck(this, Load);

    return _possibleConstructorReturn(this, (Load.__proto__ || Object.getPrototypeOf(Load)).apply(this, arguments));
  }

  _createClass(Load, [{
    key: 'preload',
    value: function preload() {
      var textStyle = {
        font: '45px Arial',
        alight: 'center',
        stroke: 'blue',
        fill: 'blue'
      };

      this.game.add.text(80, 150, 'loading...', textStyle);

      this.game.load.spritesheet('wizard', 'assets/wizardsprite.png', 95, 123, 6);
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.state.start('menu');
    }
  }]);

  return Load;
}(Phaser.State);

exports.default = Load;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Menu = function (_Phaser$State) {
  _inherits(Menu, _Phaser$State);

  function Menu() {
    _classCallCheck(this, Menu);

    return _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).apply(this, arguments));
  }

  _createClass(Menu, [{
    key: 'create',
    value: function create() {
      var _this2 = this;

      var textStyle = {
        font: '45px Arial',
        alight: 'center',
        stroke: 'blue',
        fill: 'blue'
      };

      var title = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'ES2015 Wizard', textStyle);

      title.anchor.set(0.5);

      textStyle.font = '36px Arial';

      var instructions = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '"s" key to start', textStyle);

      instructions.anchor.set(0.5);

      var controlMessage = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 150, 'use arrow keys to move', textStyle);

      controlMessage.anchor.set(0.5);

      var muteMessage = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 225, '"SPACEBAR" to win.', textStyle);

      muteMessage.anchor.set(0.5);

      var sKey = this.game.input.keyboard.addKey(Phaser.KeyCode.S);

      sKey.onDown.addOnce(function () {
        return _this2.game.state.start('play');
      });
    }
  }]);

  return Menu;
}(Phaser.State);

exports.default = Menu;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wizard = require('../sprites/wizard');

var _wizard2 = _interopRequireDefault(_wizard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Play = function (_Phaser$State) {
  _inherits(Play, _Phaser$State);

  function Play() {
    _classCallCheck(this, Play);

    return _possibleConstructorReturn(this, (Play.__proto__ || Object.getPrototypeOf(Play)).apply(this, arguments));
  }

  _createClass(Play, [{
    key: 'create',
    value: function create() {
      this.game.physics.startSystem(Phaser.Physics.ARCADE);

      this.wizard = new _wizard2.default(this.game, 350, 300);
      this.game.add.existing(this.wizard);

      this.cursors = this.game.input.keyboard.createCursorKeys();
      this.game.stage.backgroundColor = '#ffffff';
      this.game.input.keyboard.addKeyCapture([Phaser.KeyCode.SPACEBAR]);
    }
  }, {
    key: 'update',
    value: function update() {
      if (!this.startTime) {
        this.startTime = Date.now();
      }

      // 20 seconds to win
      if (Date.now() - this.startTime > 20000) {
        this.startTime = 0;
        this.game.state.start('gameover');
      }

      this.wizard.move(this.cursors);

      if (this.game.input.keyboard.isDown(Phaser.KeyCode.SPACEBAR)) {
        this.startTime = 0;
        this.game.state.start('victory');
      }
    }
  }]);

  return Play;
}(Phaser.State);

exports.default = Play;

},{"../sprites/wizard":2}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Victory = function (_Phaser$State) {
  _inherits(Victory, _Phaser$State);

  function Victory() {
    _classCallCheck(this, Victory);

    return _possibleConstructorReturn(this, (Victory.__proto__ || Object.getPrototypeOf(Victory)).apply(this, arguments));
  }

  _createClass(Victory, [{
    key: 'create',
    value: function create() {
      var _this2 = this;

      var textStyle = {
        font: '45px Arial',
        alight: 'center',
        stroke: 'black',
        fill: 'red'
      };

      var title = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'Victory!', textStyle);
      title.anchor.set(0.5);

      textStyle.font = '36px Arial';

      var instructions = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '"s" key to play again', textStyle);
      instructions.anchor.set(0.5);

      var sKey = this.game.input.keyboard.addKey(Phaser.KeyCode.S);
      sKey.onDown.addOnce(function () {
        return _this2.game.state.start('play');
      });
    }
  }]);

  return Victory;
}(Phaser.State);

exports.default = Victory;

},{}]},{},[1]);

//# sourceMappingURL=../dist/app.min.js.map
